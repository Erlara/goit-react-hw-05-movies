{"version":3,"file":"static/js/485.ce76996a.chunk.js","mappings":"yNAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,yHAOVE,EAAOF,EAAAA,GAAAA,GAAH,wNAWJG,EAAMH,EAAAA,GAAAA,IAAH,wCAIHI,EAAQJ,EAAAA,GAAAA,GAAH,4D,SCHlB,EAnBmB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OAAOF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OAChB,SAACT,EAAD,WACE,UAACH,EAAD,CAAYa,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAAhD,WACE,0BACE,SAACH,EAAD,CACEY,IAAK,mCAAqCJ,EAC1CK,IAAI,cAIR,UAACZ,EAAD,eAASM,SATFD,EADK,GAcnB,EClBYQ,EAAYjB,EAAAA,GAAAA,IAAH,sHAMTkB,EAAOlB,EAAAA,GAAAA,GAAH,oGCKjB,EAVmB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACpB,OACE,SAACY,EAAD,WACE,SAACC,EAAD,WACE,SAAC,EAAD,CAAYb,OAAQA,OAI3B,C,sHCTYD,E,OAAQJ,GAAAA,GAAH,iH,SCoBlB,EAjBa,WACX,OAA4BmB,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAsBC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC5BJ,EAAUI,EAAKC,QAChB,GACF,GAAE,KAGD,4BACE,SAACrB,EAAD,8BACA,SAACsB,EAAA,EAAD,CAAYrB,OAAQA,MAGzB,C,+LClBKsB,EAAW,gCACXC,EAAU,mCAAhB,SAEeN,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBO,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBC,IAF7C,cACQE,EADR,yBAISA,GAJT,2EAOeC,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BtB,GAA/B,uFACyBoB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDlB,EADC,oBACamB,EADb,oBADzB,cACQE,EADR,yBAISA,GAJT,2EAOeE,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BvB,GAA/B,uFACyBoB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDlB,EADC,4BACqBmB,EADrB,oBADzB,cACQE,EADR,yBAISA,GAJT,2EAOeG,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCxB,GAAlC,uFACyBoB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDlB,EADC,4BACqBmB,EADrB,2BADzB,cACQE,EADR,yBAISA,GAJT,2EAOeI,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,uFACyBN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcC,EADd,4DACyEO,IAFlG,cACQL,EADR,yBAISA,GAJT,kE","sources":["components/MoviesItem/MoviesItem.styled.jsx","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","servises/fetchAPI.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  color: black;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 4 - 20px);\n  background-color: #f1c32b;\n  border-radius: 8px;\n  overflow: hidden;\n  text-align: center;\n  :hover {\n    box-shadow: 0px 10px 10px #072f13;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n`;\n\nexport const Title = styled.h3`\n  padding: 5px;\n  color: #2c0231;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Img, Item, StyledLink, Title } from './MoviesItem.styled';\n\nconst MoviesItem = ({ movies }) => {\n  const location = useLocation();\n\n  return movies.map(({ id, title, poster_path }) => (\n    <Item key={id}>\n      <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n        <div>\n          <Img\n            src={'https://image.tmdb.org/t/p/w500/' + poster_path}\n            alt=\"poster\"\n          />\n        </div>\n\n        <Title> {title}</Title>\n      </StyledLink>\n    </Item>\n  ));\n};\n\nexport default MoviesItem;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1600px;\n  margin: 0 auto;\n  padding: 10px 15px;\n  background-color: #2c0231;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n","import MoviesItem from 'components/MoviesItem/MoviesItem';\nimport { Container, List } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <Container>\n      <List>\n        <MoviesItem movies={movies} />\n      </List>\n    </Container>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  text-align: center;\n  color: #2c0231;\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\n","import { useEffect, useState } from 'react';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { fetchTrendingMovies } from 'servises/fetchAPI';\nimport { Title } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetchTrendingMovies().then(({ data }) => {\n      setMovies(data.results);\n    });\n  }, []);\n\n  return (\n    <div>\n      <Title>Trending today</Title>\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '31387222f9d913a960cb8ee3c225d2d3';\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nasync function fetchMoviesById(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n}\n\nasync function fetchMoviesCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n}\n\nasync function fetchMoviesReviews(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response;\n}\n\nasync function fetchMoviesSearch(query) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response;\n}\n\nexport {\n  fetchTrendingMovies,\n  fetchMoviesById,\n  fetchMoviesCast,\n  fetchMoviesSearch,\n  fetchMoviesReviews,\n};\n"],"names":["StyledLink","styled","Link","Item","Img","Title","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","Container","List","useState","setMovies","useEffect","fetchTrendingMovies","then","data","results","MoviesList","BASE_URL","API_KEY","axios","response","fetchMoviesById","fetchMoviesCast","fetchMoviesReviews","fetchMoviesSearch","query"],"sourceRoot":""}